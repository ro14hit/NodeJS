const Joi = require('joi');

// Define your schema for validation
const postSchema = Joi.object({
  title: Joi.string().trim().min(3).max(100).required(),
  content: Joi.string().trim().min(10).required(),
  category: Joi.string().valid('tech', 'business', 'lifestyle').required(),
  // Add other properties for validation as needed
});

// Function to validate the request body
const validatePost = (req, res, next) => {
  const { error } = postSchema.validate(req.body);

  if (error) {
    const validationErrors = error.details.map(detail => detail.message);
    return res.status(400).json({ error: "Validation failed", details: validationErrors });
  }

  // If validation passes, continue to the next middleware or route handler
  next();
};

// Example usage in a route handler
app.post('/posts', validatePost, async (req, res) => {
  try {
    const newPost = new Post(req.body);
    await newPost.save();
    res.status(201).json({ message: "Post created successfully", post: newPost });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal server error" });
  }
});
